type Query {
    # Seller
    sellers: [Seller]!
    seller(id: Int!): Seller!

    # Component
    components: [Component]!
    component(id: Int!): Component!

    # Build
    builds: [Build]!
    build(id: Int!): Build!
}

type Mutation {
    # Seller
    saveSeller(seller: SellerDTO!): Seller!
    updateSeller(id: Int!, seller: SellerDTO!): Seller!
    deleteSeller(id: Int!): Boolean!

    # Component
    saveComponent(component: ComponentDTO!): Component!
    updateComponent(id: Int!, component: ComponentDTO!): Component!
    deleteComponent(id: Int!): Boolean!

    # Build
    saveBuild(build: BuildDTO!): Build!
    updateBuild(id: Int!, build: BuildDTO!): Build!
    deleteBuild(id: Int!): Boolean!
}

# Seller
type Seller {
    id: Int
    name: String
    image: String
}

input SellerDTO {
    name: String
    image: String
}

# PriceHistory
type PriceHistory {
    id: Int
    price: Float
    amazonPrice: Float
    ebayPrice: Float
    date: String
}

# Component
type Component {
    id: Int
    description: String
    image: String
    name: String
    type: String
    price: Float
    amazon_price: Float
    ebay_price: Float
    sellerName: String
    userNick: String
    priceHistory: [PriceHistory]
}

input ComponentDTO {
    name: String
    description: String
    image: String
    image64: String
    type: String
    price: Float
    amazon_price: Float
    ebay_price: Float
    sellerName: String
}

# BuildComponent
type BuildComponent {
    dateCreated: String
    component: Component
    priceAtTheTime: Float
}

# Build
type Build {
    id: Int
    name: String
    notes: String
    category: String
    userNick: String
    totalPrice: Float
    buildsComponents: [BuildComponent]
}

input BuildDTO {
    name: String
    notes: String
    category: String
    componentsIds: [Int]
}